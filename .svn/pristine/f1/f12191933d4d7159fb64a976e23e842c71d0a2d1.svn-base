<template>
  <div class="map">
    <div id="allmap"></div>
    <div @click="ptInCircle" style="margin-top: 100px">9999</div>
  </div>
</template>
<script>
  import { yiyang} from '../../api/api';
  export default{
    name:'baiduMap',
    props:[],
    data(){
      return {
        map:'',
        location:''
      }
    },
    created(){

    },
    watch:{

    },
    destroyed: function() {

    },
    methods: {
      //地图地址解析
      getPoint(address){
        let _this=this;
        let myGeo = new BMap.Geocoder();
        myGeo.getPoint(address, function(point){
            if (point) {
              console.log(point)
              _this.location=point.lng+','+point.lat;
            }else{
              console.log("您选择地址没有解析到结果!");
            }
        })
      },
      ptInCircle(){
        console.log('0000')
        let pt = new BMap.Point(120.2024317160, 30.2270004482);//测试点
        let c = new BMap.Point(120.2821552293, 30.2790601228); //圆心
        let circle = new BMap.Circle(c, 5000);//测试圆

        let result = BMapLib.GeoUtils.isPointInCircle(pt, circle);
        if(result == true){
          alert("点在圆形内");
        } else {
          alert("点在圆形外")
        }

        //演示：将点与圆形添加到地图上
        this.map.clearOverlays();
        let mkr = new BMap.Marker(pt);
        this.map.addOverlay(mkr);
        this.map.addOverlay(circle);
      },
      initMap(){
        let _this=this;
        this.map = new BMap.Map("allmap");
        this.map.centerAndZoom('浙江省杭州市', 12);  // 初始化地图,设置中心点坐标和地图级别
        this. map.setCurrentCity("杭州市");          // 设置地图显示的城市 此项是必须设置的
        this.map.enableScrollWheelZoom(true);     //开启鼠标滚轮缩放
        this.map.enableContinuousZoom(true);    //启用地图惯性拖拽，默认禁用
        this.map.addControl(new BMap.NavigationControl());  //添加默认缩放平移控件
        setTimeout(()=>{
          let point=new BMap.Point(_this.map.getCenter().lng ,_this.map.getCenter().lat);
          //let point=new BMap.Point(120.2821552293, 30.2790601228)
          let mkr = new BMap.Marker(point);
          this.map.addOverlay(mkr);
          //alert("当前地图中心点：" + _this.map.getCenter().lng + "," + _this.map.getCenter().lat);
        },500)
        //this.map.addOverlay(new BMap.Marker(new BMap.Point(pt.lng,pt.lat),{})); //
      },
    },
    mounted() {
      let _this=this;
      this.initMap();
      this.map.addEventListener("dragend", function(){
        let center =_this.map.getCenter();
        let point=new BMap.Point(center.lng , center.lat);
        let circle = new BMap.Circle(point, 5000,{
          strokeWeight: 2,
          strokeColor: "#1C3A99",
          fillColor:""
        });//测试圆
        let mkr = new BMap.Marker(point);
        _this.map.clearOverlays();
        _this.map.addOverlay(mkr);
        _this.map.addOverlay(circle);
      });
      this.map.addEventListener("zoomend", function(){
        let center =_this.map.getCenter();
        let point=new BMap.Point(center.lng , center.lat);
        let circle = new BMap.Circle(point, 5000,{
          strokeWeight: 2,
          strokeColor: "#1C3A99",
          fillColor:""
        });//测试圆
        let mkr = new BMap.Marker(point);
        _this.map.clearOverlays();
        _this.map.addOverlay(mkr);
        _this.map.addOverlay(circle);
      });
    }
  }
</script>

<style lang="scss" scoped>
  #allmap {
    width: 100%;
    height: 100%;
    overflow: hidden;
  }
  .map{
    height: 60%;
    position: relative;
    padding: 0 16px;
  }

</style>

